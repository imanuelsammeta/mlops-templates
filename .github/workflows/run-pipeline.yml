name: run-pipeline

on:
  workflow_call:
    inputs:
      parameters-file:
        required: true
        type: string
      resource_group:
        required: true
        type: string
      workspace_name:
        required: true
        type: string
      job-name:
        required: true
        type: string
    secrets:
      creds:
        required: true
jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: "Az CLI login"
        uses: azure/login@v1
        with:
            creds: ${{ secrets.creds }}
          # Azure login can use either Service Principal or OIDC authentication:
          # 1. Service Principal: Uses client ID, tenant ID, client secret/certificate
          #    Example: creds: ${{secrets.creds}}
          #
          # 2. OIDC (OpenID Connect): More secure, uses federated identity credentials
          #    Example:
          #    client-id: ${{ secrets.AZURE_CLIENT_ID }}
          #    tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          #    subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          #    enable-oidc: true
          #
          # Choose the appropriate method based on your security requirements
          # client-id: ${{ secrets.AZURE_CLIENT_ID }}
          # tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # Uncomment next line to use OIDC
          # enable-oidc: true
      - name: install-extension
        run: az extension add -n ml -y
      - name: update-extension
        run: az extension update -n ml
      - name: Show referenced assets/compute
        run: |
          echo "=== Environments ==="
          az ml environment list \
          --resource-group ${{ inputs.resource_group }} \
          --workspace-name ${{ inputs.workspace_name }} \
          -o table
          echo "=== Data assets ==="
          az ml data list \
          --resource-group ${{ inputs.resource_group }} \
          --workspace-name ${{ inputs.workspace_name }} \
          -o table
          echo "=== Computes ==="
          az ml compute list \
          --resource-group ${{ inputs.resource_group }} \
          --workspace-name ${{ inputs.workspace_name }} \
          -o table
      - name: Validate-Pipeline
        run: az ml job validate --file mlops/azureml/train/pipeline.yml --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }}
      - name: run-ml-pipeline
        run: |
          echo "=== Starting Azure ML pipeline run ==="
          echo "Workspace: ${{ inputs.workspace_name }}"
          echo "Resource Group: ${{ inputs.resource_group }}"
          echo "Pipeline file: ${{ github.workspace }}/${{ inputs.parameters-file }}"
          echo "Listing files in working directory for sanity:"
          ls -la
          echo "Listing pipeline file details:"
          ls -la "${{ github.workspace }}/${{ inputs.parameters-file }}" || echo "Pipeline file not found!"

          echo "=== Submitting job ==="
          run_id=$(az ml job create --file ${{ github.workspace }}/${{ inputs.parameters-file  }} --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --verbose --query name -o tsv)
          echo "Job ID returned: $run_id"

          echo "run_id=$RUN_ID" >> "$GITHUB_OUTPUT"
          echo "RUN_ID=$RUN_ID" >> "$GITHUB_ENV"
          if [[ -z "$run_id" ]]
          then
            echo "Job creation failed"
            exit 3
          fi
          az ml job show -n $run_id --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --web 
          status=$(az ml job show -n $run_id --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --query status -o tsv)
          echo "Job Status 1 is " $status
          if [[ -z "$status" ]]
          then
            echo "Status query failed"
            exit 4
          fi
          running=("NotStarted" "Queued" "Starting" "Preparing" "Running" "Finalizing" "CancelRequested")
          while [[ ${running[*]} =~ $status ]]
          do
            sleep 15 
            status=$(az ml job show -n $run_id --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --query status -o tsv)
            echo $status
          done
          if [[ "$status" != "Completed" ]]  
          then
            az ml job stream -n "$run_id" --all-logs --tail 200 || true
            echo "Training Job failed or canceled with the job status $status"  
            exit 3
          fi
          echo "=== Pipeline run completed successfully ==="
